{"version":3,"sources":["config/endpoints.js","components/login.js","components/homepage.js","components/addSuggestions.js","components/viewSuggestions.js","App.js","serviceWorker.js","index.js"],"names":["baseUrl","Login","useState","setUsername","setPassword","className","Input","type","onChange","e","target","value","placeholder","Button","onClick","window","fetch","method","then","res","json","result","console","log","Homepage","AddSuggestion","ViewSuggestion","App","setValue","classes","makeStyles","theme","root","flexGrow","menuButton","marginRight","spacing","title","useStyles","a11yProps","index","id","AppBar","position","Toolbar","Tabs","event","newValue","aria-label","Tab","label","Typography","variant","Boolean","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","message"],"mappings":"oTAAMA,EAAU,4DC6BDC,MAxBf,WAAkB,IAAD,EACmBC,mBAAS,IAD5B,mBACIC,GADJ,aAEmBD,mBAAS,IAF5B,mBAEIE,GAFJ,WAGb,OACI,gCACI,+CACA,uBAAMC,UAAU,aAAhB,UACI,cAACC,EAAA,EAAD,CAAOC,KAAK,OAAOC,SAAU,SAAAC,GAAC,OAAIN,EAAYM,EAAEC,OAAOC,QAAQC,YAAY,aAC3E,cAACN,EAAA,EAAD,CAAOC,KAAK,OAAOC,SAAU,SAAAC,GAAC,OAAIL,EAAYK,EAAEC,OAAOC,QAAQC,YAAY,aAC3E,cAACC,EAAA,EAAD,CAAQC,QAAS,SAAAL,GAO7BM,OAAOC,MDcAhB,EAAU,SCdK,CAACiB,OAAQ,SAC5BC,MAAK,SAAAC,GAAG,OAAIA,EAAIC,UAChBF,MAAK,SAACG,GAELC,QAAQC,IAAIF,OAXJ,2BCADG,MAXf,WACE,OACE,sBAAKnB,UAAU,MAAf,UACE,wDACA,2GACA,uBACA,cAAC,EAAD,QCESoB,MATf,WACE,OACE,sBAAKpB,UAAU,MAAf,UACE,kDACA,iFCKSqB,MATf,WACE,OACE,sBAAKrB,UAAU,MAAf,UACE,kDACA,4ECuDSsB,MApDf,WAAgB,IAAD,EACazB,mBAAS,GADtB,mBACNS,EADM,KACCiB,EADD,OAE+B1B,mBAAS,IAFxC,mBAqBP2B,GArBO,UAUKC,aAAW,SAACC,GAAD,MAAY,CACvCC,KAAM,CACJC,SAAU,GAEZC,WAAY,CACVC,YAAaJ,EAAMK,QAAQ,IAE7BC,MAAO,CACLJ,SAAU,MAGEK,IAChB,SAASC,EAAUC,GACjB,MAAO,CACLC,GAAG,cAAD,OAAgBD,GAClB,gBAAgB,mBAAhB,OAAoCA,IAMxC,OACE,sBAAKnC,UAAU,MAAf,UACE,cAACqC,EAAA,EAAD,CAAQC,SAAS,SAAStC,UAAU,UAApC,SACE,eAACuC,EAAA,EAAD,WACE,eAACC,EAAA,EAAD,CAAMlC,MAAOA,EAAOH,SAPP,SAACsC,EAAOC,GAC3BnB,EAASmB,IAMyCC,aAAW,sBAAvD,UACE,cAACC,EAAA,EAAD,aAAKC,MAAM,YAAeX,EAAU,KACpC,cAACU,EAAA,EAAD,aAAKC,MAAM,kBAAqBX,EAAU,KAC1C,cAACU,EAAA,EAAD,aAAKC,MAAM,oBAAuBX,EAAU,QAE9C,cAACY,EAAA,EAAD,CAAYC,QAAQ,KAAK/C,UAAWwB,EAAQQ,MAA5C,6BAKM,IAAR1B,GAAc,cAAC,EAAD,IACN,IAARA,GAAc,cAAC,EAAD,IACN,IAARA,GAAc,cAAC,EAAD,QC5CF0C,QACW,cAA7BtC,OAAOuC,SAASC,UAEe,UAA7BxC,OAAOuC,SAASC,UAEhBxC,OAAOuC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrB9C,MAAK,SAAA+C,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACL9C,QAAQ8C,MAAMA,EAAMC,c","file":"static/js/main.7e612f92.chunk.js","sourcesContent":["const baseUrl = 'http://2m8qpxhytd.execute-api.us-east-2.amazonaws.com/dev'\r\n\r\nexport function getSuggestionsEndpoint() {\r\n    return baseUrl + '/suggestions'\r\n};\r\n\r\nexport function postSuggestionEndpoint() {\r\n    return baseUrl + '/suggestions'\r\n}\r\n\r\nexport function getASuggestionEndpoint(suggestion_id) {\r\n    return baseUrl + '/suggestions/' + suggestion_id\r\n}\r\n\r\nexport function putASuggestionIntoUsedModeEndpoint(suggestion_id) {\r\n    return baseUrl + '/suggestions/' + suggestion_id + '/use'\r\n}\r\n\r\nexport function putASuggestionIntoActiveModeEndpoint(suggestion_id) {\r\n    return baseUrl + '/suggestions/' + suggestion_id + '/activate'\r\n}\r\n\r\nexport function postASuggestionRemovalEndpoint(suggestion_id) {\r\n    return baseUrl + '/suggestions/' + suggestion_id + '/activate'\r\n}\r\n\r\nexport function postANewUserEndpoint() {\r\n    return baseUrl + '/user/'\r\n}\r\n\r\nexport function postAUserRemovalEndpoint(user_id) {\r\n    return baseUrl + '/user/' + user_id + '/remove'\r\n}\r\n\r\nexport function login() {\r\n    return baseUrl + '/login'\r\n}\r\n\r\nexport default baseUrl;","import React, {useState} from 'react';\r\nimport { Button, Input } from '@material-ui/core';\r\nimport { login } from '../config/endpoints';\r\n\r\n\r\nfunction Login() {\r\n    const [username, setUsername] = useState('')\r\n    const [password, setPassword] = useState('')\r\n    return (\r\n        <div>\r\n            <h1>Please log in</h1>\r\n            <form className=\"login-form\">\r\n                <Input type=\"text\" onChange={e => setUsername(e.target.value)} placeholder=\"Username\" />\r\n                <Input type=\"text\" onChange={e => setPassword(e.target.value)} placeholder=\"Password\" />\r\n                <Button onClick={e=>{apiLogin(username, password)}}>Log in</Button>\r\n            </form>\r\n        </div>\r\n    );\r\n}\r\n\r\nfunction apiLogin() {\r\n    window.fetch(login(), {method: 'POST'})\r\n      .then(res => res.json())\r\n      .then((result)=> {\r\n        //upstream set auth to true\r\n        console.log(result)\r\n      })\r\n}\r\n\r\nexport default Login;\r\n","import React from 'react';\r\nimport Login from './login';\r\n\r\nfunction Homepage() {\r\n  return (\r\n    <div className=\"App\">\r\n      <h1>Welcome to Peach Soda!</h1>\r\n      <p>Use this website to view and suggest music themes for our weekly playlist.</p>\r\n      <br></br>\r\n      <Login />\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default Homepage;\r\n","import React from 'react';\r\n\r\nfunction AddSuggestion() {\r\n  return (\r\n    <div className=\"App\">\r\n      <h1>Add a suggestion</h1>\r\n      <p>Fill out the form below to add a suggestion.</p>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default AddSuggestion;\r\n","import React from 'react';\r\n\r\nfunction ViewSuggestion() {\r\n  return (\r\n    <div className=\"App\">\r\n      <h1>View Suggestions</h1>\r\n      <p>Checkout the entered suggestions below.</p>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default ViewSuggestion;\r\n","import React, { useState, useEffect } from 'react';\nimport './App.css';\nimport { makeStyles } from '@material-ui/core/styles';\nimport {AppBar, Toolbar, Tabs, Typography, IconButton, Tab} from '@material-ui/core'\nimport Homepage from './components/homepage';\nimport AddSuggestion from './components/addSuggestions';\nimport ViewSuggestion from './components/viewSuggestions';\nimport { getSuggestionsEndpoint, postSuggestionEndpoint, putASuggestionIntoUsedModeEndpoint, putASuggestionIntoActiveModeEndpoint, postASuggestionRemovalEndpoint, postANewUserEndpoint, postAUserRemovalEndpoint} from './config/endpoints';\n\nfunction App() {\n  const [value, setValue] = useState(0);\n  const [suggestionList, setSuggestionList] = useState([]);\n  // useEffect(()=>{\n  //   window.fetch(getSuggestionsEndpoint(), {method: 'GET'})\n  //   .then(res => res.json())\n  //   .then((result)=> {\n  //     setSuggestionList(result)\n  //   })\n  // })\n  const useStyles = makeStyles((theme) => ({\n    root: {\n      flexGrow: 1,\n    },\n    menuButton: {\n      marginRight: theme.spacing(2),\n    },\n    title: {\n      flexGrow: 1,\n    },\n  }));\n  const classes = useStyles();\n  function a11yProps(index) {\n    return {\n      id: `simple-tab-${index}`,\n      'aria-controls': `simple-tabpanel-${index}`,\n    };\n  }\n  const handleChange = (event, newValue) => {\n    setValue(newValue);\n  };\n  return (\n    <div className=\"App\">\n      <AppBar position=\"static\" className=\"app-bar\">\n        <Toolbar>\n          <Tabs value={value} onChange={handleChange} aria-label=\"simple tabs example\" >\n            <Tab label=\"Homepage\" {...a11yProps(0)} />\n            <Tab label=\"Add suggestion\" {...a11yProps(1)} />\n            <Tab label=\"View suggestions\" {...a11yProps(2)} />\n          </Tabs>\n          <Typography variant=\"h6\" className={classes.title}>\n            Peach Soda\n          </Typography>\n        </Toolbar>\n      </AppBar>\n      {(value===0) && <Homepage />}\n      {(value===1) && <AddSuggestion />}\n      {(value===2) && <ViewSuggestion />}\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}